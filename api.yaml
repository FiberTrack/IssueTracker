openapi: 3.0.2
info:
  version: 1.0.0
  title: IssueTracker
  description: "This is the Open API documentation for the REST API of our beloved application **IssueTracker** deployed at <https://issuetrackerv1.herokuapp.com/>. <br>All operations are executable. Operations that make changes to the domain require authentication. In this case, you must **Authorize** your request by providing your users API key."
servers:
  - url: 'https://issuetrackerv1.herokuapp.com/'
  - url: 'http://52.90.205.229:8080'

paths:
  /issues:
    get:
      tags:
        - Issues
      summary: Get all the issues or a list of filtered, ordered or searched issues
      operationId: index
      parameters:
        - in: query
          name: direction
          schema:
            type: string
          description: Direction to sort the issues by (asc or desc)
        - in: query
          name: order_by
          schema:
            type: string
          description: Attribute to sort the issues by (severity, issue_type, priority, assign, status)
        - in: query
          name: options[]
          schema:
            type: array
            items:
              type: string
        - in: query
          name: severity[]
          schema:
            type: array
            items:
              type: string
        - in: query
          name: type[]
          schema:
            type: array
            items:
              type: string
        - in: query
          name: priority[]
          schema:
            type: array
            items:
              type: string
        - in: query
          name: status[]
          schema:
            type: array
            items:
              type: string
        - in: query
          name: assign[]
          schema:
            type: array
            items:
              type: string
          description: List of options of Type, Severity, Priority, Subject, Status and Assign to filter by
        - in: query
          name: filtro
          schema:
            type: string
          description: Filter to search issues by subject or description

      responses:
        200:
          description: List of issues
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Issue'
        400:
          description: "Error: Bad Request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'

    post:
      tags:
        - Issues
      summary: Add a new Issues to the IssueTracker
      operationId: create
      requestBody:
        description: Provide the Subject, Description, Assigned, Type, Severity, Priority Status and Watched of the new Issue
        content:
          application/json:
            schema:
              type: object
              properties:
                subject:
                  type: string
                  example: 'Subject'
                description:
                  type: string
                  example: 'Description'
                assign:
                  type: string
                  enum: ['Gabriel Del Valle, Arnau Gracia López', 'Abdelrahim Chelh El Azzaoui', 'Abel Batalla Ferrés']
                  example: 'Gabriel Del Valle'
                severity:
                  type: string
                  enum: ['Wishlist', 'Minor', 'Normal', 'Important', 'Critical']
                  example: 'Wishlist'
                priority:
                  type: string
                  enum: ['Low', 'Normal', 'High']
                  example: 'High'
                issue_type:
                  type: string
                  enum: ['Bug', 'Question', 'Enhancement']
                  example: 'Bug'
                status:
                  type: string
                  enum: ['New', 'In progress', 'Ready for test', 'Postponed', 'Closed', 'Information needed', 'Rejected']
                  example: 'New'
                watcher_ids:
                  type: array
                  items:
                    type: string
                  example: ["1"]
              required:
                  - subject
      security:
        - api_key: []

      responses:
        201:
          description: Issue created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
        400:
          description: "Error: Bad Request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        403:
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'




  /issues/{IssueId}:
    get:
      tags:
        - Issues
      summary: Finds a Issue by its ID
      operationId: show
      parameters:
      - name: IssueId
        in: path
        description: ID of Issue to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Issue was getted succesfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
        404:
          description: 'Error: Issue not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/issue_not_found'


    delete:
      tags:
      - Issues
      summary: Delete an Issue by specifying its ID.
      operationId: destroy
      parameters:
      - name: IssueId
        in: path
        description: Issue id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: 'Issue deleted'
          content:
            application/json:
              examples:
                errorExample:
                  $ref: '#/components/examples/issue_delete'

        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        403:
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
        404:
          description: 'Error: Issue not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/issue_not_found'
      security:
      - api_key: []

  /issues/{IssueId}/attachments:
    post:
      tags:
        - Attachments
      summary: Add a file as an attachment to an Issue with a valid ID
      operationId: createFile
      parameters:
        - in: path
          name: IssueId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        description: Upload the file you want to attach to the Issue
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: The file was successfully attached to the issue with ID IssueId
          content:
            application/json:
              examples:
                errorExample:
                  $ref: '#/components/examples/file_add'
        404:
          description: 'Error: Issue not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/issue_not_found'

        403:
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'

        '401':
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
      security:
      - api_key: []


    get:
      summary: Get all files attachments for a specific Issue
      tags:
        - Attachments
      operationId: get_attachments
      parameters:
        - in: path
          name: IssueId
          description: ID of the Issue to list all its files
          required: true
          schema:
            type: integer
      responses:
        200:
          description: List of attachments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Attachment'
        404:
          description: 'Error: Issue not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/issue_not_found'




  /attachments/{AttachmentID}:
    delete:
      summary: Delete an attachment
      description: Deletion of the specified attachment.
      tags:
        - Attachments
      operationId: deleteFile
      parameters:
        - in: path
          name: AttachmentID
          description: ID of the attachment to delete
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Attachment deleted successfully
        400:
          description: "Error: Bad Request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        404:
          description: 'Attachment not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/attachment_not_found'
      security:
        - api_key: []


  /issues/{id}/block:
    post:
      tags:
        - Issues -> Block/Unblock
      summary: Block/Unblock an Issue
      description: Block or unblock (change state) of the specified issue.
      operationId: block
      parameters:
      - name: id
        in: path
        description: ID of the Issue to add a comment to
        required: true
        schema:
          type: integer
      security:
        - api_key: []
      responses:
        200:
          description: "Issue successfully blocked/unblocked"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        403:
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
        404:
          description: 'Issue not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/issue_not_found'


  /issues/{id}/deadline:
    post:
      tags:
        - Issues -> Deadline
      summary: Add/delete deadline of an Issue
      description: Adds, modifies or deletes dedline for the specified issue.
      operationId: add_deadline
      parameters:
      - name: id
        in: path
        description: ID of the Issue to add a deadline to
        required: true
        schema:
          type: integer
      requestBody:
        description: Provide the date of the deadline or empty value ("") for deletion
        content:
          application/json:
            schema:
              type: object
              properties:
                deadline_date:
                  type: string
                  pattern: '^[0-9]{2}/[0-9]{2}/[0-9]{4}$'
                  format: DD/MM/YYYY
                  example: '19/08/2023'
      security:
        - api_key: []
      responses:
        200:
          description: "Deadline added successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        403:
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
        404:
          description: 'Issue not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/issue_not_found'


  /issues/{id}/comments:
    get:
      tags:
        - Issues -> Comments
      summary: Finds comments by Issue
      description: Returns all the comments of the specified Issue.
      operationId: getcomments
      parameters:
      - name: id
        in: path
        description: ID of Issue to search
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Successful list of comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        404:
          description: 'Issue not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/issue_not_found'

  /issues/{IssueId}/comments/new:
    post:
      tags:
        - Issues -> Comments
      summary: New comment
      description: Adds a new comment to the specified issue.
      operationId: create_comment
      parameters:
      - name: IssueId
        in: path
        description: ID of the Issue to add a comment to
        required: true
        schema:
          type: integer
      requestBody:
        description: Provide a comment for an issue
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  example: "HOLAA"
                issue_id:
                  type: integer
                  format: int64
                  example: 50

      security:
        - api_key: []

      responses:
        200:
          description: "Comment created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        403:
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
        404:
          description: 'Issue not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/issue_not_found'

  /issues/{id}/activities:
    get:
      tags:
        - Issues -> Activities
      summary: Finds activites by Issue
      description: Returns all the activites for the specified Issue.
      operationId: get_activities
      parameters:
      - name: id
        in: path
        description: ID of Issue to search
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Successful list of activities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Activity'
        404:
          description: 'Issue not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/issue_not_found'

  /users:
    get:
      tags:
        - Users
      summary: Retrieves all users
      description: Returns all the registered users.
      operationId: all_users_as_json
      responses:
        '200':
          description: Successful list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'


  /users/{usuari_id}:
    get:
      tags:
        - Users
      summary: Find a User by their ID
      description: Returns a single User
      operationId: show_user
      parameters:
      - name: usuari_id
        in: path
        description: ID of the User to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'

  /user/update:
    post:
      tags:
        - Users
      summary: Update user profile
      operationId: update_profile
      requestBody:
        description: Provide updated user data
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                full_name:
                  type: string
                  description: Name of the user
                  example: "John Doe"
                bio:
                  type: string
                  description: Description of the user
                  example: "I am a developer"
                avatar_url:
                  type: string
                  description: Url of the avatar
                  format: binary
                  example: 'https://example.com/avatar.jpg'

      security:
        - api_key: []
      responses:
        200:
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: "Error: Bad Request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        403:
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'

  /users/{usuari_id}/activities:
    get:
      tags:
        - User -> Activities
      summary: Finds activites by its UserID
      description: Returns all the activites for the Issue with IssueID
      operationId: get_activities_user
      parameters:
      - name: usuari_id
        in: path
        description: ID of Issue to search
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Activity'
                  
  /users/{usuari_id}/watchers:
    get:
      tags:
        - User -> Watchers
      summary: Finds watched issues by its UserID
      description: Returns all the issues watched by the specified user.
      operationId: get_watchers_user
      parameters:
      - name: usuari_id
        in: path
        description: ID of user to search
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    issue_id:
                      type: integer
                    user_id:
                      type: integer
              example:
                - id: 113
                  issue_id: 303
                  user_id: 2
                - id: 122
                  issue_id: 305
                  user_id: 2
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'


  /issues/create_multiple:
      post:
        tags:
          - Issues
        summary: Create Multiple Issues
        requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  subjects:
                    type: string
                    description: Subjects of the issues separated by new lines
                    example: "a1\nb2\nc3\nd4"
                required:
                  - subjects
        responses:
          '200':
            description: Issues created successfully
          400:
            description: "Error: Bad Request"
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResult'
                examples:
                  errorExample:
                    $ref: '#/components/examples/error400'

        security:
          - api_key: []



  /issues/{issue_id}:
    put:
      tags:
        - Issues
      summary: Update an issue
      parameters:
        - name: issue_id
          in: path
          description: Issue ID to update
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                subject:
                  type: string
                  description: Subject of the issue
                assign:
                  type: string
                  description: To who is assigned
                issue_type:
                  type: string
                  description: Type of the issue
                severity:
                  type: string
                  description: Severity of the issue
                priority:
                  type: string
                  description: Priority of the issue
                status:
                  type: string
                  description: Status of the issue
                watcher_ids:
                  type: array
                  description: IDs of the watchers
                  items:
                    type: integer
      responses:
        '200':
          description: Issue successfully updated
        '422':
          description: Validation error, see details in JSON response
      security:
        - api_key: []

components:
  schemas:
    Issue:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        subject:
          type: string
          example: 'Subject'
        description:
          type: string
          example: 'Description'
        assign:
          type: string
          example: 'Assign'
        created_at:
          type: string
          format: date-time
          example: 'Wed, 12 Apr 2023 13:52:06.671832000 UTC +00:00'
        updated_at:
          type: string
          format: date-time
          example: 'Wed, 12 Apr 2023 13:52:06.671832000 UTC +00:00'
        severity:
          type: string
          enum: ['Wishlist', 'Minor', 'Normal', 'Important', 'Critical']
          example: 'Wishlist'
        priority:
          type: string
          enum: ['Low', 'Normal', 'High']
          example: 'High'
        issue_type:
          type: string
          enum: ['Bug', 'Question', 'Enhancement']
          example: 'Bug'
        blocked:
          type: boolean
          example: true
        deadline:
          type: string
          pattern: '^[0-9]{2}/[0-9]{2}/[0-9]{4}$'
          format: date-time
          example: '05/05/2023'
        watcher:
          type: array
          items:
            type: string
          example: ['Gabriel del Valle']
        watcher_ids:
          type: array
          items:
            type: string
            example: ["1"]
        status:
          type: string
          enum: ['New', 'In Progress', 'Ready For Test', 'Postponed', 'Closed', 'Information Needed', 'Rejected']
          example: 'New'
        created_by:
          type: string
          example: 'Gabriel del Valle'
      required:
        - id
        - created_at
        - severity
        - priority
        - issue_type
        - status

    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        content:
          type: string
          default: null
        issue_id:
          type: integer
          format: int64
          example: '22/12/2005'
        created_at:
          type: string
          format: date-time
          example: '22/12/2005'
        updated_at:
          type: string
          format: date-time
          example: '22/12/2005'
        user_id:
          type: integer
          format: int64
          example: 1
      required:
        - id
        - issue_id
        - created_at
        - user_id

    Activity:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
          example: 1
        issue_id:
          type: integer
          format: int64
          example: 1
        action:
          type: string
          example: 'Created'
        created_at:
          type: string
          format: date-time
          example: '22/12/2005'
        updated_at:
          type: string
          format: date-time
          example: '22/12/2005'
      required:
      - user_id
      - issue_id
      - action
      - created_at
      - updated_at

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        full_name:
          type: string
          example: 'Gabriel del Valle'
        uid:
          type: string
          example: '1'
        avatar_url:
          type: string
          format: uri
          example: 'https://example.com/avatar.jpg'
        provider:
          type: string
          example: 'google'
        email:
          type: string
          format: email
          example: 'gabri.del.valle@gmail.com'
        bio:
          type: string
          example: 'Software Engineer'
        api_key:
          type: string
          example: 'abcdefghijklmnopqrstuvwxyz'
      required:
        - id
        - full_name
        - email
        - encrypted_password

    Attachment:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        name:
          type: string
          example: 'example.pdf'
        URL:
          type: string
          example: 'https://fibertracker-bucket.s3.amazonaws.com/example.pdf'



    ErrorResult:
      type: object
      properties:
        message:
          type: string
          example: 'Content is too long (maximum is 280 characters)'
      required:
        - message


  examples:
    issue_delete:
      value:
        message: "The issue was deleted successfully"
    file_add:
      value:
        message: "Attachment uploaded successfully"
    issue_not_found:
      value:
        message: "Issue not found"
    attachment_not_found:
      value:
        message: "There is no attachment with the provided ID"
    error400:
      value:
        message: "Content is too long (maximum is 280 characters)"
    error401:
      value:
        message: "You provided no token"
    error403:
      value:
        message: "You provided an invalid token"
    error404:
      value:
        message: "There is no user with the provided ID"



  securitySchemes:
    api_key:
      type: apiKey
      name: Authorization
      in: header
